// Code generated by MockGen. DO NOT EDIT.
// Source: internal/v1/abstraction.go

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dtos "github.com/tjarkmeyer/companies/companies/internal/v1/dtos"
	models "github.com/tjarkmeyer/companies/companies/internal/v1/models"
)

// MockICompaniesRepository is a mock of ICompaniesRepository interface.
type MockICompaniesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICompaniesRepositoryMockRecorder
}

// MockICompaniesRepositoryMockRecorder is the mock recorder for MockICompaniesRepository.
type MockICompaniesRepositoryMockRecorder struct {
	mock *MockICompaniesRepository
}

// NewMockICompaniesRepository creates a new mock instance.
func NewMockICompaniesRepository(ctrl *gomock.Controller) *MockICompaniesRepository {
	mock := &MockICompaniesRepository{ctrl: ctrl}
	mock.recorder = &MockICompaniesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICompaniesRepository) EXPECT() *MockICompaniesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICompaniesRepository) Create(arg0 *models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICompaniesRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICompaniesRepository)(nil).Create), arg0)
}

// DeleteByID mocks base method.
func (m *MockICompaniesRepository) DeleteByID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockICompaniesRepositoryMockRecorder) DeleteByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockICompaniesRepository)(nil).DeleteByID), arg0)
}

// GetByID mocks base method.
func (m *MockICompaniesRepository) GetByID(arg0 string) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockICompaniesRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockICompaniesRepository)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockICompaniesRepository) Update(arg0 *models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICompaniesRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICompaniesRepository)(nil).Update), arg0)
}

// MockICompaniesService is a mock of ICompaniesService interface.
type MockICompaniesService struct {
	ctrl     *gomock.Controller
	recorder *MockICompaniesServiceMockRecorder
}

// MockICompaniesServiceMockRecorder is the mock recorder for MockICompaniesService.
type MockICompaniesServiceMockRecorder struct {
	mock *MockICompaniesService
}

// NewMockICompaniesService creates a new mock instance.
func NewMockICompaniesService(ctrl *gomock.Controller) *MockICompaniesService {
	mock := &MockICompaniesService{ctrl: ctrl}
	mock.recorder = &MockICompaniesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICompaniesService) EXPECT() *MockICompaniesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICompaniesService) Create(arg0 *dtos.CompanyIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICompaniesServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICompaniesService)(nil).Create), arg0)
}

// DeleteByID mocks base method.
func (m *MockICompaniesService) DeleteByID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockICompaniesServiceMockRecorder) DeleteByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockICompaniesService)(nil).DeleteByID), arg0)
}

// GetByID mocks base method.
func (m *MockICompaniesService) GetByID(arg0 string) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockICompaniesServiceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockICompaniesService)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockICompaniesService) Update(arg0 *dtos.CompanyIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICompaniesServiceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICompaniesService)(nil).Update), arg0)
}
